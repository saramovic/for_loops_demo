package forloops;   

public class ForLoops {

    public static void main(String[] args) {
        for (int i = 0; i < 691; i++) {
            System.out.println("I love dogs!");
        }
    }

}

//problem: if you copy and paste this statement 100 times, it'll print out 100 "I love dogs!" output in console but what if you wanted to printout a specific big number like 690 times.

/*
Certainly! Let’s go through each line of your Java program to understand what it does:

### Code Explanation:

```java
package forloops;
```

- **`package forloops;`**: This line declares that the code is part of a package named `forloops`. A package in Java is a way to group related classes together. It helps in organizing your code, avoiding name conflicts, and controlling access. If this code is part of a larger project, it would be placed in a directory structure that matches the package name.

---

```java
public class ForLoops {
```

- **`public class ForLoops {`**: This line declares a public class named `ForLoops`. 
  - **`public`**: This keyword makes the class accessible from other classes, even outside the package.
  - **`class`**: This keyword is used to define a class in Java.
  - **`ForLoops`**: This is the name of the class. It should match the file name (`ForLoops.java`).

  The opening curly brace `{` starts the body of the class, where the fields, methods, and constructors of the class are defined.

---

```java
    public static void main(String[] args) {
```

- **`public static void main(String[] args) {`**: This line defines the `main` method, which is the entry point of any Java application.
  - **`public`**: This means the `main` method is accessible from outside the class, allowing the Java Virtual Machine (JVM) to invoke it to start the program.
  - **`static`**: This keyword indicates that the method belongs to the class itself rather than to instances of the class. The JVM can call this method without creating an instance of the class.
  - **`void`**: This means the method does not return any value.
  - **`main`**: This is the name of the method. It’s a special method recognized by the JVM as the starting point of the program.
  - **`String[] args`**: This is a parameter that takes an array of `String` objects. It allows you to pass command-line arguments to your program.

  The opening curly brace `{` starts the body of the `main` method.

---

```java
        for (int i = 0; i < 691; i++) {
```

- **`for (int i = 0; i < 691; i++) {`**: This line starts a `for` loop, which is used to repeat a block of code a certain number of times.
  - **`int i = 0`**: This part initializes a loop counter variable `i` with the value `0`. `int` is the data type (integer), and `i` is the variable name.
  - **`i < 691`**: This is the loop condition. The loop will continue as long as `i` is less than `691`.
  - **`i++`**: This part increments the value of `i` by 1 after each iteration of the loop. The `++` operator is shorthand for `i = i + 1`.
  
  The opening curly brace `{` starts the block of code that will be executed repeatedly by the loop.

---

```java
            System.out.println("I love dogs!");
```

- **`System.out.println("I love dogs!");`**: This line prints the string `"I love dogs!"` to the console. 
  - **`System.out`**: This is a standard output stream in Java, typically connected to the console.
  - **`println`**: This method prints the string to the console and then moves the cursor to a new line, so each print statement appears on a separate line.
  - **`"I love dogs!"`**: This is the string that will be printed. The text inside the quotation marks is the exact output.

  This line will be executed 691 times due to the loop, so `"I love dogs!"` will be printed 691 times.

---

```java
        }
```

- **`}`**: This closing curly brace marks the end of the `for` loop’s body. The code inside the loop runs repeatedly until the loop condition (`i < 691`) is no longer true.

---

```java
    }
```

- **`}`**: This closing curly brace marks the end of the `main` method’s body.

---

```java
}
```

- **`}`**: This final closing curly brace marks the end of the `ForLoops` class.

### Summary:
- The program starts with the `main` method.
- It runs a `for` loop that starts at `i = 0` and continues as long as `i < 691`.
- Inside the loop, it prints "I love dogs!" to the console.
- The loop runs 691 times, so the message is printed 691 times. 
*/
