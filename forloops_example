package forloops;

public class ForLoops {

    public static void main(String[] args) {
        // First for loop to print "I love dogs!" 691 times
        for (int i = 0; i < 691; i++) {
            System.out.println("I love dogs!");
        }

        // Array of grades
        int[] grades = {98, 100, 83, 90, 93};
        
        // Second for loop to print each grade
        for(int i = 0; i < grades.length; i++) {
            System.out.println(grades[i]);
        }
    }
}

/*
Explanation of the code:

1. `package forloops;`:
   - This line declares that the code is part of a package named `forloops`.
   - A package in Java is a way to group related classes together.
   - It helps in organizing your code, avoiding name conflicts, and controlling access.

2. `public class ForLoops {`:
   - This line declares a public class named `ForLoops`.
   - `public` makes the class accessible from other classes, even outside the package.
   - `class` is the keyword used to define a class in Java.
   - `ForLoops` is the name of the class and should match the file name (`ForLoops.java`).

3. `public static void main(String[] args) {`:
   - This line defines the main method, the entry point of any Java application.
   - `public` allows the method to be accessible from outside the class.
   - `static` means the method belongs to the class rather than to instances of the class.
   - `void` indicates that the method does not return any value.
   - `main` is the name of the method, recognized by the JVM as the program's starting point.
   - `String[] args` takes an array of `String` objects, allowing command-line arguments to be passed.

4. `for (int i = 0; i < 691; i++) {`:
   - This line starts a `for` loop that repeats a block of code a specified number of times.
   - `int i = 0` initializes a loop counter variable `i` with the value `0`.
   - `i < 691` is the loop condition, meaning the loop will run as long as `i` is less than 691.
   - `i++` increments the value of `i` by 1 after each iteration of the loop.

5. `System.out.println("I love dogs!");`:
   - This line prints the string `"I love dogs!"` to the console.
   - `System.out` is a standard output stream in Java, typically connected to the console.
   - `println` prints the string and moves the cursor to a new line, so each print statement appears on a separate line.
   - `"I love dogs!"` is the string that will be printed.
   - Since the loop runs 691 times, `"I love dogs!"` will be printed 691 times.

6. `int[] grades = {98, 100, 83, 90, 93};`:
   - This line declares and initializes an array of integers named `grades`.
   - The array contains five integers representing grades: 98, 100, 83, 90, and 93.

7. `for(int i = 0; i < grades.length; i++) {`:
   - This line starts a second `for` loop, which iterates over the elements of the `grades` array.
   - `i = 0` initializes the loop counter `i` to 0.
   - `i < grades.length` ensures the loop runs for each element in the `grades` array.
   - `grades.length` returns the number of elements in the array, which is 5 in this case.
   - `i++` increments `i` by 1 after each iteration, moving to the next element in the array.

8. `System.out.println(grades[i]);`:
   - Inside the loop, this line prints the current element of the `grades` array.
   - `grades[i]` accesses the element at index `i` in the array.
   - As the loop runs, each grade (98, 100, 83, 90, 93) is printed on a new line.

9. Closing braces `}`:
   - These braces mark the end of the `for` loops, the `main` method, and the `ForLoops` class.
*/
