package forloops;

public class ForLoops {

    public static void main(String[] args) {
        // Problem: If you copy and paste this statement 100 times,
        // it'll print out 100 "I love dogs!" outputs in the console.
        // But what if you wanted to print out a specific big number like 690 times?
        
        for (int i = 0; i < 691; i++) {
            System.out.println("I love dogs!");
        }
    }

}

/*
Certainly! Letâ€™s go through each line of your Java program to understand what it does:

1. `package forloops;`:
   - This line declares that the code is part of a package named `forloops`.
   - A package in Java is a way to group related classes together.
   - It helps in organizing your code, avoiding name conflicts, and controlling access.

2. `public class ForLoops {`:
   - This line declares a public class named `ForLoops`.
   - `public` makes the class accessible from other classes, even outside the package.
   - `class` is the keyword used to define a class in Java.
   - `ForLoops` is the name of the class and should match the file name (`ForLoops.java`).

3. `public static void main(String[] args) {`:
   - This line defines the main method, the entry point of any Java application.
   - `public` allows the method to be accessible from outside the class.
   - `static` means the method belongs to the class rather than to instances of the class.
   - `void` indicates that the method does not return any value.
   - `main` is the name of the method, recognized by the JVM as the program's starting point.
   - `String[] args` takes an array of `String` objects, allowing command-line arguments to be passed.

4. `for (int i = 0; i < 691; i++) {`:
   - This line starts a `for` loop that repeats a block of code a specified number of times.
   - `int i = 0` initializes a loop counter variable `i` with the value `0`.
   - `i < 691` is the loop condition, meaning the loop will run as long as `i` is less than 691.
   - `i++` increments the value of `i` by 1 after each iteration of the loop.

5. `System.out.println("I love dogs!");`:
   - This line prints the string `"I love dogs!"` to the console.
   - `System.out` is a standard output stream in Java, typically connected to the console.
   - `println` prints the string and moves the cursor to a new line, so each print statement appears on a separate line.
   - `"I love dogs!"` is the string that will be printed.
   - Since the loop runs 691 times, `"I love dogs!"` will be printed 691 times.

6. Closing braces `}`:
